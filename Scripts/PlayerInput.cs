//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Scripts/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharacterControls"",
            ""id"": ""60be0ad8-314f-4f0b-adf5-ae8b4630dbd2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3a7a0cc2-785b-44c6-b771-3276d8c9446b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""8ab27450-ccbd-4d89-93e8-bd9fbf590c22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""93c40e2f-3d54-4ce6-94e1-6f0845cc1cf1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""1ea0f860-08c8-4d7e-8389-1faad776b349"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flashlight"",
                    ""type"": ""Button"",
                    ""id"": ""560760c2-a1c0-4583-a463-cf644b3df866"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lamps"",
                    ""type"": ""Button"",
                    ""id"": ""329374b9-740b-4b19-9573-2bdfa10bd482"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ray"",
                    ""type"": ""Button"",
                    ""id"": ""ddd96998-2b9f-430f-b7e7-0124beaf8155"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""407b2b43-d807-4d75-a8e3-e5da5756f96c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""303ca7cc-aa40-4061-b425-57158ceba0f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Button"",
                    ""id"": ""ac741148-0224-4dd0-8998-dd7d255685dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""5c9fe138-5c96-453f-98b7-04403a925d3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SceneSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""00d9e65c-e554-48cc-b9b2-03a938d8e535"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e299c293-2aa6-4e09-acbb-1d3c35b36021"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""15c08d28-593c-4ba6-9e1d-62536739d660"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b3306286-5302-45ce-ae0d-ebbf24134de2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fdedd6a6-27a7-4dec-b77e-9423fedee370"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f937b7dc-3680-4a58-af02-74cc239e734b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""590ba684-a314-4302-a4e2-92cb4df97fca"",
                    ""path"": ""<HID::DragonRise Inc.   Generic   USB  Joystick  >/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3530d190-85b0-4119-aea9-55beb274afaf"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""050cce27-6d8e-4512-bc1a-e6a7b667234e"",
                    ""path"": ""<HID::DragonRise Inc.   Generic   USB  Joystick  >/button5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2192d875-9fed-4fd9-a559-e1edcbee4608"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1bd031fd-008b-4855-ac02-796ba85aacd0"",
                    ""path"": ""<HID::DragonRise Inc.   Generic   USB  Joystick  >/button6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c73a7a90-176f-4cc7-a841-0c630002c149"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1a4fea9-eed0-442e-870a-18c4bc2dd6f8"",
                    ""path"": ""<HID::DragonRise Inc.   Generic   USB  Joystick  >/button8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1a3ce57-793b-4a63-889d-4ebb4ecd5dbe"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caf2d0b1-59dd-4a12-adba-d2112246552a"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lamps"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbe668e9-ba25-4cc8-9c3e-e7e309335a4e"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ray"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5afce434-64e8-4ec9-aeb1-16d2cc33808e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""510d5a32-2ecd-40f0-9dca-e2ec1b79bcb4"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d35747d9-1e4e-4217-8d6d-80da044826f8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""937efb7e-9d4e-41bf-bd43-660eaf7433d0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aea838cb-892d-481c-90d8-9bde92776f16"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SceneSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PuzzleControls"",
            ""id"": ""0f4482aa-cb41-4220-bd97-ff1ef3546538"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""8f20de36-fab3-4635-813d-e6669db66aef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""78bfa9d9-d5a5-472d-8478-0bd916f1dade"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""64970f9b-b1c8-41c5-85e1-11667e5e4047"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""dab10dfb-7cb3-4bf6-ac1a-26b84519ac73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""cd772a9a-4e6b-43d5-bda4-e6769f145a2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""11f51acd-1f30-487f-8bb5-85cc60de57e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""342db4e3-3774-4f5c-9f14-7f99917b00ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1306926d-9216-4a31-9b6d-4233ddeee5b3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a83654b5-bee8-4a51-8702-062c6f09f7b0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffc9d97a-a0d8-4abb-9b64-945419baa3f9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f914d4f2-24fb-48ec-a558-a573e4751786"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7da350d1-0e50-48a4-b7f6-e0b9fe562370"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec155d05-193b-45d5-bb26-68a71c6ec593"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c782d0cf-a073-41ba-a82e-ce3aaf077f8f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bade192b-cc24-4ec6-bd18-5d35ae1474c0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterControls
        m_CharacterControls = asset.FindActionMap("CharacterControls", throwIfNotFound: true);
        m_CharacterControls_Move = m_CharacterControls.FindAction("Move", throwIfNotFound: true);
        m_CharacterControls_Run = m_CharacterControls.FindAction("Run", throwIfNotFound: true);
        m_CharacterControls_Jump = m_CharacterControls.FindAction("Jump", throwIfNotFound: true);
        m_CharacterControls_Crouch = m_CharacterControls.FindAction("Crouch", throwIfNotFound: true);
        m_CharacterControls_Flashlight = m_CharacterControls.FindAction("Flashlight", throwIfNotFound: true);
        m_CharacterControls_Lamps = m_CharacterControls.FindAction("Lamps", throwIfNotFound: true);
        m_CharacterControls_Ray = m_CharacterControls.FindAction("Ray", throwIfNotFound: true);
        m_CharacterControls_Use = m_CharacterControls.FindAction("Use", throwIfNotFound: true);
        m_CharacterControls_Drop = m_CharacterControls.FindAction("Drop", throwIfNotFound: true);
        m_CharacterControls_Look = m_CharacterControls.FindAction("Look", throwIfNotFound: true);
        m_CharacterControls_Menu = m_CharacterControls.FindAction("Menu", throwIfNotFound: true);
        m_CharacterControls_SceneSwitch = m_CharacterControls.FindAction("SceneSwitch", throwIfNotFound: true);
        // PuzzleControls
        m_PuzzleControls = asset.FindActionMap("PuzzleControls", throwIfNotFound: true);
        m_PuzzleControls_Select = m_PuzzleControls.FindAction("Select", throwIfNotFound: true);
        m_PuzzleControls_MoveDown = m_PuzzleControls.FindAction("MoveDown", throwIfNotFound: true);
        m_PuzzleControls_MoveUp = m_PuzzleControls.FindAction("MoveUp", throwIfNotFound: true);
        m_PuzzleControls_MoveLeft = m_PuzzleControls.FindAction("MoveLeft", throwIfNotFound: true);
        m_PuzzleControls_MoveRight = m_PuzzleControls.FindAction("MoveRight", throwIfNotFound: true);
        m_PuzzleControls_Rotate = m_PuzzleControls.FindAction("Rotate", throwIfNotFound: true);
        m_PuzzleControls_Exit = m_PuzzleControls.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControls
    private readonly InputActionMap m_CharacterControls;
    private ICharacterControlsActions m_CharacterControlsActionsCallbackInterface;
    private readonly InputAction m_CharacterControls_Move;
    private readonly InputAction m_CharacterControls_Run;
    private readonly InputAction m_CharacterControls_Jump;
    private readonly InputAction m_CharacterControls_Crouch;
    private readonly InputAction m_CharacterControls_Flashlight;
    private readonly InputAction m_CharacterControls_Lamps;
    private readonly InputAction m_CharacterControls_Ray;
    private readonly InputAction m_CharacterControls_Use;
    private readonly InputAction m_CharacterControls_Drop;
    private readonly InputAction m_CharacterControls_Look;
    private readonly InputAction m_CharacterControls_Menu;
    private readonly InputAction m_CharacterControls_SceneSwitch;
    public struct CharacterControlsActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterControls_Move;
        public InputAction @Run => m_Wrapper.m_CharacterControls_Run;
        public InputAction @Jump => m_Wrapper.m_CharacterControls_Jump;
        public InputAction @Crouch => m_Wrapper.m_CharacterControls_Crouch;
        public InputAction @Flashlight => m_Wrapper.m_CharacterControls_Flashlight;
        public InputAction @Lamps => m_Wrapper.m_CharacterControls_Lamps;
        public InputAction @Ray => m_Wrapper.m_CharacterControls_Ray;
        public InputAction @Use => m_Wrapper.m_CharacterControls_Use;
        public InputAction @Drop => m_Wrapper.m_CharacterControls_Drop;
        public InputAction @Look => m_Wrapper.m_CharacterControls_Look;
        public InputAction @Menu => m_Wrapper.m_CharacterControls_Menu;
        public InputAction @SceneSwitch => m_Wrapper.m_CharacterControls_SceneSwitch;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControlsActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterControlsActions instance)
        {
            if (m_Wrapper.m_CharacterControlsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnMove;
                @Run.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnRun;
                @Jump.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCrouch;
                @Flashlight.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnFlashlight;
                @Flashlight.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnFlashlight;
                @Flashlight.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnFlashlight;
                @Lamps.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnLamps;
                @Lamps.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnLamps;
                @Lamps.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnLamps;
                @Ray.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnRay;
                @Ray.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnRay;
                @Ray.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnRay;
                @Use.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnUse;
                @Use.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnUse;
                @Use.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnUse;
                @Drop.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnDrop;
                @Drop.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnDrop;
                @Drop.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnDrop;
                @Look.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnLook;
                @Menu.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnMenu;
                @SceneSwitch.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnSceneSwitch;
                @SceneSwitch.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnSceneSwitch;
                @SceneSwitch.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnSceneSwitch;
            }
            m_Wrapper.m_CharacterControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Flashlight.started += instance.OnFlashlight;
                @Flashlight.performed += instance.OnFlashlight;
                @Flashlight.canceled += instance.OnFlashlight;
                @Lamps.started += instance.OnLamps;
                @Lamps.performed += instance.OnLamps;
                @Lamps.canceled += instance.OnLamps;
                @Ray.started += instance.OnRay;
                @Ray.performed += instance.OnRay;
                @Ray.canceled += instance.OnRay;
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
                @SceneSwitch.started += instance.OnSceneSwitch;
                @SceneSwitch.performed += instance.OnSceneSwitch;
                @SceneSwitch.canceled += instance.OnSceneSwitch;
            }
        }
    }
    public CharacterControlsActions @CharacterControls => new CharacterControlsActions(this);

    // PuzzleControls
    private readonly InputActionMap m_PuzzleControls;
    private IPuzzleControlsActions m_PuzzleControlsActionsCallbackInterface;
    private readonly InputAction m_PuzzleControls_Select;
    private readonly InputAction m_PuzzleControls_MoveDown;
    private readonly InputAction m_PuzzleControls_MoveUp;
    private readonly InputAction m_PuzzleControls_MoveLeft;
    private readonly InputAction m_PuzzleControls_MoveRight;
    private readonly InputAction m_PuzzleControls_Rotate;
    private readonly InputAction m_PuzzleControls_Exit;
    public struct PuzzleControlsActions
    {
        private @PlayerInput m_Wrapper;
        public PuzzleControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_PuzzleControls_Select;
        public InputAction @MoveDown => m_Wrapper.m_PuzzleControls_MoveDown;
        public InputAction @MoveUp => m_Wrapper.m_PuzzleControls_MoveUp;
        public InputAction @MoveLeft => m_Wrapper.m_PuzzleControls_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_PuzzleControls_MoveRight;
        public InputAction @Rotate => m_Wrapper.m_PuzzleControls_Rotate;
        public InputAction @Exit => m_Wrapper.m_PuzzleControls_Exit;
        public InputActionMap Get() { return m_Wrapper.m_PuzzleControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PuzzleControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPuzzleControlsActions instance)
        {
            if (m_Wrapper.m_PuzzleControlsActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnSelect;
                @MoveDown.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveDown;
                @MoveDown.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveDown;
                @MoveDown.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveDown;
                @MoveUp.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveUp;
                @MoveUp.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveUp;
                @MoveUp.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveUp;
                @MoveLeft.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveLeft;
                @MoveRight.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveRight;
                @MoveRight.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveRight;
                @MoveRight.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnMoveRight;
                @Rotate.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnRotate;
                @Exit.started -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_PuzzleControlsActionsCallbackInterface.OnExit;
            }
            m_Wrapper.m_PuzzleControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @MoveDown.started += instance.OnMoveDown;
                @MoveDown.performed += instance.OnMoveDown;
                @MoveDown.canceled += instance.OnMoveDown;
                @MoveUp.started += instance.OnMoveUp;
                @MoveUp.performed += instance.OnMoveUp;
                @MoveUp.canceled += instance.OnMoveUp;
                @MoveLeft.started += instance.OnMoveLeft;
                @MoveLeft.performed += instance.OnMoveLeft;
                @MoveLeft.canceled += instance.OnMoveLeft;
                @MoveRight.started += instance.OnMoveRight;
                @MoveRight.performed += instance.OnMoveRight;
                @MoveRight.canceled += instance.OnMoveRight;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }
        }
    }
    public PuzzleControlsActions @PuzzleControls => new PuzzleControlsActions(this);
    public interface ICharacterControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnFlashlight(InputAction.CallbackContext context);
        void OnLamps(InputAction.CallbackContext context);
        void OnRay(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnSceneSwitch(InputAction.CallbackContext context);
    }
    public interface IPuzzleControlsActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
}
